{"version":3,"sources":["Components/Guess/Guess.module.css","Components/Node/node.module.css","Components/Log/LogItem/LogItem.module.css","Components/ColorPanel/ColorPanel.module.css","Components/ColorPanel/ColorPanelItem/ColorPanelItem.module.css","Components/Log/Log.module.css","Components/Controls/Controls.module.css","Components/HiddenCode/HiddenCode.module.css","Components/Node/Node.js","Components/Guess/Guess.js","Components/ColorPanel/ColorPanelItem/ColorPanelItem.js","Components/ColorPanel/ColorPanel.js","Components/Information/Information.js","Components/Log/LogItem/LogItem.js","Components/Log/Log.js","Components/Controls/Quit/Quit.js","Components/Controls/NewGame/NewGame.js","Components/Controls/Controls.js","Components/HiddenCode/HiddenCode.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","node","props","color","classList","classes","Node","log","push","Log","className","join","onClick","allowClick","clicked","guess","setActive","active","nodes","map","el","index","key","submit","findIndex","GuessWrapper","Active","style","left","Button","disabled","colorPanelItem","ColorPanelItem","colorPanel","items","getColor","length","width","ColorPanel","information","infoStr","guessFound","guessMissed","game","attempts","logItem","colors","LogItem","NodeWrapper","info","logItems","getColors","reversed","i","quit","enabled","newGame","controls","Controls","Quit","gameOn","NewGame","hiddenCode","hidden","HiddenCodeWrapper","compare","arr1","arr2","a1","toString","a2","console","App","state","numOfColors","numOfAttempts","chosenColor","activeNode","found","missed","logInfo","getColorHandler","setState","setColor","getLogColorHandler","loggedGuess","getGuess","newActiveNode","setActiveHandler","position","validateGuess","correct","foundElements","getHidden","forEach","missedElements","missplaced","_","indexH","logInfoNew","submitGuessHandler","remainAttempts","updateLog","newLog","prevGuess","quitHandler","newGameHandler","newHidden","newAttempts","Math","floor","random","this","HiddenCode","Guess","Information","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.875fc8db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"GuessWrapper\":\"Guess_GuessWrapper__2aoET\",\"Active\":\"Guess_Active__2NTIK\",\"Button\":\"Guess_Button__2QVlz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Node\":\"node_Node__O0Poe\",\"Log\":\"node_Log__3qQQP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LogItem\":\"LogItem_LogItem__SX7Dm\",\"NodeWrapper\":\"LogItem_NodeWrapper__3A7vA\",\"Node\":\"LogItem_Node__1rhpd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColorPanel\":\"ColorPanel_ColorPanel__2XP13\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColorPanelItem\":\"ColorPanelItem_ColorPanelItem__2rDpA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Log\":\"Log_Log__1yl4k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__1xsqn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HiddenCodeWrapper\":\"HiddenCode_HiddenCodeWrapper__3JeQ-\"};","import React from 'react';\r\nimport classes from './node.module.css';\r\n\r\nconst node = (props) => {\r\n    let color = 'color' + props.color;\r\n    const classList = [classes.Node, color];\r\n    if (props.log) classList.push(classes.Log);\r\n    return (\r\n        <div \r\n            className={classList.join(' ')} \r\n            onClick={props.allowClick ? props.clicked : null}\r\n        ></div>\r\n    )\r\n}\r\n\r\nexport default node;\r\n","import React from 'react';\r\nimport Node from '../Node/Node';\r\nimport classes from './Guess.module.css';\r\n\r\nconst guess = (props) => {\r\n    let setActive = (props.active * 100) + 'px';\r\n    const nodes = props.guess.map((el, index) => {\r\n        return <Node \r\n            key={index} \r\n            color={el} \r\n            allowClick={true} \r\n            clicked={() => props.setActive(index)}\r\n            />});\r\n    let submit = props.guess.findIndex(el => el === -1);\r\n    return (\r\n        <div>\r\n            <h2>Your guess :</h2>\r\n            <div className={classes.GuessWrapper}>\r\n                <div className={classes.Active} style={{left : setActive}}></div>\r\n                {nodes}\r\n            </div>\r\n            <button \r\n                className={classes.Button}\r\n                disabled={submit === -1 ? false : true}\r\n                onClick={props.submit}>\r\n                submit\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default guess;\r\n","import React from 'react';\r\nimport classes from './ColorPanelItem.module.css';\r\n\r\nconst colorPanelItem = (props) => {\r\n    let color = 'color' + props.color;\r\n    return (\r\n        <div \r\n            className={[classes.ColorPanelItem, color].join(' ')}\r\n            onClick={props.clicked}\r\n        ></div>\r\n    )\r\n}\r\n\r\nexport default colorPanelItem;\r\n","import React from 'react';\r\nimport classes from './ColorPanel.module.css';\r\nimport ColorPanelItem from './ColorPanelItem/ColorPanelItem';\r\n\r\nconst colorPanel = (props) => {\r\n    const items = [];\r\n    for (let index = 0; index < props.length; index++)\r\n        items.push(<ColorPanelItem \r\n                        color={index} \r\n                        key={index} \r\n                        clicked={() => props.getColor(index)}/>)\r\n    const width = items.length * 40;\r\n    return (\r\n        <div className={classes.ColorPanel} style={{width : width}}>\r\n            {items}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default colorPanel;\r\n","import React from 'react';\r\n\r\nconst information = (props) => {\r\n    let infoStr = '';\r\n\r\n    if (props.guessFound === 4){\r\n        infoStr = 'CONGRATULATIONS!!!';\r\n    }else if(props.guessFound === 0 && props.guessMissed === 0){\r\n        infoStr = \"No matches on your last guess..\"\r\n    }else{\r\n        if(props.guessFound > 0){\r\n            infoStr = \"There \";\r\n            infoStr += (props.guessFound === 1) ? 'was 1 item' : 'were '+ props.guessFound +' items';\r\n            infoStr += ' on the exact place';\r\n        }\r\n        if(props.guessMissed > 0){\r\n            infoStr += (infoStr !== '') ? ' and there ' : 'There ';\r\n            infoStr += (props.guessMissed === 1) ? 'was 1 item' : 'were '+ props.guessMissed +' items';\r\n            infoStr += ' missplaced';\r\n        }\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <h3>{props.game ? 'Remaining attempts : ' + props.attempts : ' '}</h3>\r\n            <h2>{infoStr}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default information\r\n","import React from 'react';\r\nimport classes from './LogItem.module.css';\r\nimport Node from '../../Node/Node';\r\n\r\nconst logItem = (props) => {\r\n    let nodes = props.colors.map((el, index) => {\r\n        return (<Node \r\n                    key={index} \r\n                    color={el} \r\n                    allowClick={false}\r\n                    log={true} />)});\r\n    return (\r\n        <div className={classes.LogItem} onClick={props.clicked}>\r\n            <div className={classes.NodeWrapper}>{nodes}</div>\r\n            <div>Correct : {props.info[0]} / Missplaced : {props.info[1]}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default logItem;\r\n","import React from 'react';\r\nimport classes from './Log.module.css';\r\nimport LogItem from './LogItem/LogItem';\r\n\r\nconst log = (props) => {\r\n    let logItems = props.items.map((el, index) =>{ \r\n        return <LogItem \r\n                    key={index} \r\n                    colors={el} \r\n                    info={props.info[index]}\r\n                    clicked={()=>props.getColors(el)}/>\r\n    });\r\n    let reversed = [];\r\n    for(let i = logItems.length; i>=0; i--){\r\n        reversed.push(logItems[i]);\r\n    }\r\n    return (\r\n        <div className={classes.Log}>\r\n            <h3>Your previous attmepts </h3>\r\n            {reversed}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default log;\r\n","import React from 'react';\r\n\r\nconst quit = (props) => {\r\n    return (\r\n        <div>\r\n            <button onClick={props.clicked} disabled={!(props.enabled)}>Quit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default quit;\r\n","import React from 'react';\r\n\r\nconst newGame = (props) => {\r\n    return (\r\n        <div>\r\n            <button onClick={props.clicked} disabled={props.disabled}>New Game</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default newGame;\r\n","import React from 'react';\r\nimport classes from './Controls.module.css';\r\nimport Quit from './Quit/Quit';\r\nimport NewGame from './NewGame/NewGame';\r\n\r\nconst controls = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.Controls}>\r\n                <Quit clicked={props.quit} enabled={props.gameOn}/>\r\n                <NewGame clicked={props.game} disabled={props.gameOn}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default controls;\r\n","import React from 'react';\r\nimport classes from './HiddenCode.module.css';\r\nimport Node from '../Node/Node';\r\n\r\nconst hiddenCode = (props) => {\r\n    const nodes = props.hidden.map((el, index) => {\r\n        return (\r\n            <Node \r\n                key={index}\r\n                color={(props.game) ? -2 : el} \r\n                allowClick={false} />\r\n        );\r\n    })\r\n    return (\r\n        <div>\r\n            <h2>Hidden Code</h2>\r\n            <div className={classes.HiddenCodeWrapper}>\r\n                {nodes}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default hiddenCode;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Guess from './Components/Guess/Guess';\nimport ColorPanel from './Components/ColorPanel/ColorPanel';\nimport Information from './Components/Information/Information';\nimport Log from './Components/Log/Log';\nimport Controls from './Components/Controls/Controls';\nimport HiddenCode from './Components/HiddenCode/HiddenCode';\n\nfunction compare(arr1, arr2){\n  let a1 = arr1.toString();\n  let a2 = arr2.toString();\n  if (a1 === a2){\n    console.log('YOU WON')\n  }else{\n    console.log('Try again');\n  }\n  return (a1 === a2);\n}\n\n\nclass App extends Component {\n  state = {\n    numOfColors : 8,\n    numOfAttempts : 10,\n    attempts : 10,\n    chosenColor : '',\n    hidden : [-2, -2, -2, -2],\n    guess : [-1, -1, -1, -1],\n    activeNode : 0,\n    found : -1, \n    missed : -1,\n    gameOn : false,\n    log : [],\n    logInfo : []\n  }\n\n\n getColorHandler = (color) => {\n   if(this.state.gameOn){\n      this.setState({chosenColor : color});\n      this.setColor(color);\n   }\n }\n\n getLogColorHandler = (colors) => {\n   if(this.state.gameOn){\n      let loggedGuess = [...colors];\n      this.setState({guess : loggedGuess});\n   }\n }\n\n setColor = (color) => {\n    let getGuess = [...this.state.guess];\n    getGuess[this.state.activeNode] = color;\n    console.log(getGuess);\n    const newActiveNode = (this.state.activeNode + 1) % 4;\n    this.setState({guess : getGuess, activeNode : newActiveNode});\n }\n\n setActiveHandler = (position)  => {\n    if(this.state.gameOn)\n      this.setState({activeNode : position});\n }\n\n validateGuess = () =>{\n    let correct = 0;\n    let foundElements = [];\n    let getGuess = [...this.state.guess];\n    const getHidden =[...this.state.hidden];\n    getHidden.forEach((el, index) => {\n      if(el === getGuess[index]){\n        correct++;\n        foundElements[index] = true;\n      }else{\n        foundElements[index] = false;\n      }\n    });\n    console.log('found', foundElements);\n    this.setState({found : correct},console.log('Found Updated'));\n    let missedElements = [];\n    let missplaced = 0;\n    foundElements.forEach((_, index) => {\n      missedElements[index] = false;\n    });\n    foundElements.forEach((el, index) => {\n      if(!el){\n        for(let indexH = 0; indexH < getHidden.length; indexH++){\n          if(!foundElements[indexH]  && !missedElements[indexH]){\n            if(getGuess[index] === getHidden[indexH]){\n              missplaced ++;\n              missedElements[indexH] = true;\n              break;\n            }\n          }\n        }\n      }\n    });\n    console.log('missed', missedElements)\n    this.setState({missed : missplaced}, console.log('Missed Updated')); \n    \n    let logInfoNew = [...this.state.logInfo];\n    logInfoNew.push([correct, missplaced]);\n    this.setState({logInfo : logInfoNew});\n }\n\n\n submitGuessHandler = () => {\n    console.log('Submiting users guess', this.state.guess);\n    if (compare(this.state.hidden, this.state.guess)){\n        this.setState({found : 4, missed : 0});\n        this.setState({gameOn : false});\n    }else{\n      this.validateGuess();\n      let remainAttempts = this.state.attempts;\n      if (remainAttempts === 1){\n        this.setState({gameOn : false});\n      }else{\n        remainAttempts--;\n        this.setState({attempts : remainAttempts});\n        this.updateLog();\n        let newGuess = [-1, -1, -1, -1];\n        this.setState({guess : newGuess, activeNode : 0});\n      }\n    }\n }\n\n updateLog = () => {\n  let newLog = [...this.state.log];\n  let prevGuess = [...this.state.guess]; \n  newLog.push(prevGuess); \n  this.setState({log : newLog}) ;\n }\n\n quitHandler = () => {\n   this.setState({gameOn : false});\n }\n\n newGameHandler = () => {\n  const newHidden = [];\n  const newAttempts = this.state.numOfAttempts;\n  const colors = this.state.numOfColors;\n  for(let i = 0; i < 4; i++)\n    newHidden.push(Math.floor(Math.random()*colors));\n\n  this.setState({\n    guess : [-1, -1, -1, -1],\n    hidden : newHidden,\n    activeNode : 0,\n    gameOn : true,\n    log : [],\n    logInfo : [],\n    found : -1,\n    missed : -1,\n    activeNode : 0,\n    attempts : newAttempts\n  });\n }\n\n\n // update info on quit\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <Controls\n            gameOn={this.state.gameOn}\n            quit={this.quitHandler}\n            game={this.newGameHandler}/>\n          <HiddenCode \n            hidden={this.state.hidden}\n            game={this.state.gameOn}/>\n          <Guess \n            active={this.state.activeNode} \n            guess={this.state.guess}\n            setActive={this.setActiveHandler}\n            submit={this.submitGuessHandler}/>\n          <ColorPanel \n            length={this.state.numOfColors} \n            getColor={this.getColorHandler}/>\n          <Information \n            attempts={this.state.attempts}\n            game={this.state.gameOn}\n            guessFound={this.state.found}\n            guessMissed={this.state.missed}\n          />\n        </div>\n        <div style={{backgroundColor:'#a1a1a1'}}>\n            <Log \n              items={this.state.log}\n              info={this.state.logInfo}\n              getColors={this.getLogColorHandler}\n            />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}